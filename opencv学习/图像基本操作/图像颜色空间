1.颜色模型转换
  cvtColor(src,dst,code,0)  
  COLOR_BGR2GRAY  彩色到灰度
  COLOR_GRAY2BGR  灰度到彩色
  COLOR_BGR2HSV   BGR到HSV
  COLOR_HSV2BGR   HSV到 BGR
eg.
  void colorSpace_Demo(Mat& image)
{
	Mat gray, hsv;
	cvtColor(image, hsv, COLOR_BGR2HSV);
	// H 0 ~ 180, S, V 
	cvtColor(image, gray, COLOR_BGR2GRAY);
	imshow("HSV", hsv);
	imshow("灰度", gray);
	// imwrite("D:/hsv.png", hsv);
	// imwrite("D:/gray.png", gray);
}

2.图像转换
  convertTo(image, CV_32F)  
  convertTo(image, CV_8U)   转为无符号8位单通道


3.多通道分离
  split(src,mvbegin)
  src:待分离的多通道图像
  mvbegin:分离后的单通道图像（为数组形式），数组大小与图像的通道数相同
4.多通道合并
  merge(mv,dst)
  mv:合并的图像数组，每个图像相同尺寸和数据类型
  dst:输出图像
eg.
  void channels_demo(Mat& image) 
 {
	std::vector<Mat> mv;
	split(image, mv);           //通道分离
	namedWindow("蓝色", WINDOW_NORMAL);
	namedWindow("绿色", WINDOW_NORMAL);
	namedWindow("红色", WINDOW_NORMAL);
	imshow("蓝色", mv[0]);
	imshow("绿色", mv[1]);
	imshow("红色", mv[2]);

	Mat dst;
	//mv[0] = 0;
	//// mv[1] = 0;
	//merge(mv, dst);              //通道合并
	//namedWindow("红", WINDOW_NORMAL);
	//imshow("红", dst);

	int from_to[] = { 0,0,1,2,2,1 };
	mixChannels(&image, 1, &dst, 1, from_to, 3);
	//namedWindow("混合通道", WINDOW_NORMAL);
	imshow("通道混合", dst);
}
